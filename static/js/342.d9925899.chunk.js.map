{"version":3,"file":"static/js/342.d9925899.chunk.js","mappings":"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","sources":["components/ErrorHandler/ErrorHandler.jsx","components/MovieList/MovieList.styled.jsx","components/MovieList/MovieList.jsx","components/SectionContainer/SectionContainer.styled.jsx","components/SectionContainer/SectionContainer.jsx","pages/MoviesPage/MoviesPage.jsx","hooks/useFetchSearchQuery.js","pages/MoviesPage/components/MovieForm.jsx","service/ApiService.js","service/stateMachine.js"],"sourcesContent":["import { useEffect } from 'react';\nimport toast from 'react-hot-toast';\n\nconst ErrorHandler = ({ errorMessage, toastErrorMessage }) => {\n  useEffect(() => {\n    console.log(toastErrorMessage)\n    toast.error(toastErrorMessage);\n  }, [toastErrorMessage]);\n\n  return <div>{errorMessage}</div>;\n};\n\nexport default ErrorHandler;\n","import styled from \"styled-components\";\n\nexport const ListEl = styled.li`\n    :not(:last-child) {\n        margin-bottom: 20px;\n    }\n`;","import { NavLink, useLocation } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nimport { ListEl } from './MovieList.styled';\n\nexport default function MovieList({ movies }) {\n  const location = useLocation();\n  return (\n    <ol>\n      {movies.map(movie => (\n        <ListEl key={movie.id}>\n          <NavLink\n            to={\n              location.pathname.length < 2\n                ? `movies/${movie.id}`\n                : `${movie.id}`\n            }\n            state={location}\n          >\n            {movie.original_title}\n          </NavLink>\n        </ListEl>\n      ))}\n    </ol>\n  );\n};\n\nMovieList.propTypes = {\n  movies: PropTypes.array.isRequired,\n}\n","import styled from 'styled-components';\n\nexport const Section = styled.section`\n  position: relative;\n  padding: 10px;\n  border: ${props => (props.isEmpty ? 'none' : '1px solid black')};\n  border-radius: 3px;\n  min-height: ${props => (props.isEmpty ? '500px' : 'auto')};\n`;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Section } from './SectionContainer.styled';\n\nconst SectionContainer = ({ children, isEmpty }) => {\n  return <Section isEmpty={isEmpty}>{children}</Section>;\n};\n\nSectionContainer.propTypes = {\n  children: PropTypes.any,\n  isEmpty: PropTypes.bool,\n}\n\nexport default SectionContainer;","import React from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nimport SectionContainer from 'components/SectionContainer';\nimport MovieList from 'components/MovieList';\nimport { MovieForm } from './components/MovieForm';\nimport Pending from 'components/Pending';\n\nimport { useFetchSearchQuery } from 'hooks/useFetchSearchQuery';\n\nimport { withApiState } from 'service/stateMachine';\nimport { fetchMovieByQuery } from 'service/ApiService';\n\nimport ErrorHandler from 'components/ErrorHandler';\n\nfunction MoviesPage({ apiState }) {\n  const paramName = 'query';\n\n  const state = useFetchSearchQuery({\n    init: [],\n    apiState: apiState,\n    fetchAPI: fetchMovieByQuery,\n    paramName: paramName,\n  });\n\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  return (\n    <>\n      <SectionContainer>\n        <MovieForm onSubmit={setSearchParams} paramName={paramName} />\n      </SectionContainer>\n\n      <SectionContainer isEmpty={state.length > 0 ? false : true}>\n        {apiState.isSuccess() && \n        <MovieList movies={state} />\n        }\n        {apiState.isPending() && <Pending />}\n        {apiState.isError() && (\n          <ErrorHandler\n            errorMessage={`Sorry, we cannot find the movie with search ${searchParams.get(\n              paramName\n            )}`}\n            toastErrorMessage=\"Text, please valid Keyword\"\n          />\n        )}\n        {apiState.isIdle() && <p>Find a Movie</p>}\n      </SectionContainer>\n    </>\n  );\n}\n\nMoviesPage.propTypes = {\n  apiState: PropTypes.object,\n};\n\nexport default withApiState(MoviesPage);\n","import { useEffect, useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport toast from 'react-hot-toast';\n\nexport const useFetchSearchQuery = ({\n  init,\n  apiState,\n  fetchAPI,\n  paramName,\n}) => {\n  const [state, setState] = useState(init);\n  const [searchParams] = useSearchParams();\n\n  useEffect(() => {\n    const query = searchParams.get(paramName);\n\n\n    if (!query) {\n      return;\n    };\n\n    apiState.pending();\n    fetchAPI(query)\n      .then(data => {\n        if (data?.results?.length === 0) {\n          throw Error();\n        }\n        setState(data.results);\n        apiState.success();\n      })\n      .catch(error => {\n        apiState.error();\n      });\n  }, [apiState, fetchAPI, paramName, searchParams]);\n\n  return state;\n};\n","import PropTypes from 'prop-types';\nimport { useForm } from 'react-hook-form';\nimport { Button, TextField } from '@mui/material';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport * as yup from 'yup';\nimport toast from 'react-hot-toast';\nimport { useEffect } from 'react';\n\nconst schema = yup\n  .object({\n    query: yup.string().min(1).required(),\n  })\n  .required();\n\nexport function MovieForm({ onSubmit, paramName }) {\n  const {\n    register,\n    handleSubmit,\n    reset,\n    formState: { errors },\n  } = useForm({\n    resolver: yupResolver(schema),\n  });\n\n  useEffect(() => {\n    if (errors[paramName]?.message?.length > 0) {\n      toast.error('Text something');\n    }\n  }, [errors, paramName]);\n\n  const formSubmit = data => {\n    console.log(data);\n    onSubmit({ [paramName]: data.query });\n    reset();\n  };\n\n  return (\n    <form\n      style={{ display: 'flex', alignItems: 'center' }}\n      onSubmit={handleSubmit(formSubmit)}\n    >\n      <TextField\n        label=\"Text Query\"\n        size=\"small\"\n        defaultValue=\"\"\n        {...register('query', { required: true })}\n      />\n      <Button sx={btnStyle} variant=\"outlined\" type=\"submit\">\n        Search Movie\n      </Button>\n    </form>\n  );\n}\n\nconst btnStyle = {\n  color: 'black',\n  border: '1px solid black',\n  marginLeft: '10px',\n};\n\nMovieForm.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n  paramName: PropTypes.string,\n};\n","import axios from 'axios';\n\nconst API_KEY = 'ddd72ffccd1b0460d4d5bf775327139b';\n\nconst BASE_URL = 'https://api.themoviedb.org/3';\n\nexport const fetchMovie = async movieId => {\n  const { data } = await axios\n    .get(`${BASE_URL}/movie/${movieId}?api_key=${API_KEY}`)\n    .catch(error => errorHandler());\n  return data;\n};\n\nexport const fetchTrendingMovies = async () => {\n  const { data } = await axios\n    .get(`${BASE_URL}/trending/movie/day?api_key=${API_KEY}`)\n    .catch(error => errorHandler());\n  return data;\n};\n\nexport const fetchMovieByQuery = async (query = '') => {\n  const { data } = await axios\n    .get(`${BASE_URL}/search/movie?api_key=${API_KEY}&query=${query}`)\n    .catch(error => errorHandler());\n  return data;\n};\n\nexport const fetchReviews = async movieId => {\n  const { data } = await axios\n    .get(\n      `${BASE_URL}/movie/${movieId}/reviews?api_key=${API_KEY}&language=en-US&page=1`\n    )\n    .catch(error => errorHandler());\n  return data;\n};\n\nexport const fetchActors = async movieId => {\n  const { data } = await axios\n    .get(\n      `${BASE_URL}/movie/${movieId}/credits?api_key=${API_KEY}&language=en-US&page=1`\n    )\n    .catch(error => errorHandler());\n  return data;\n};\n\nconst errorHandler = () => {\n  throw new Error();\n};\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport toast from 'react-hot-toast';\n\nexport const withApiState = TargetComponent =>\n  class extends Component {\n    state = {\n      current: 'idle',\n    };\n    apiState = {\n      pending: () => this.setState({ current: 'pending' }), // => state\n      success: () => this.setState({ current: 'success' }),\n      error: () => {\n        this.setState({ current: 'error' });\n      },\n      idle: () => this.setState({ current: 'idle' }),\n      isPending: () => this.state.current === 'pending', // => state process\n      isSuccess: () => this.state.current === 'success',\n      isError: () => this.state.current === 'error',\n      isIdle: () => this.state.current === 'idle',\n    };\n\n    render() {\n      return <TargetComponent {...this.props} apiState={this.apiState} />;\n    }\n  };\n\nwithApiState.propTypes = {\n  TargetComponent: PropTypes.func.isRequired,\n};\n"],"names":["errorMessage","toastErrorMessage","useEffect","console","log","toast","ListEl","styled","MovieList","movies","location","useLocation","map","movie","to","pathname","length","id","state","original_title","Section","props","isEmpty","children","withApiState","apiState","paramName","init","fetchAPI","useState","setState","useSearchParams","searchParams","query","get","pending","then","data","results","Error","success","catch","error","useFetchSearchQuery","fetchMovieByQuery","setSearchParams","SectionContainer","MovieForm","onSubmit","isSuccess","isPending","Pending","isError","ErrorHandler","isIdle","schema","yup","min","required","useForm","resolver","yupResolver","register","handleSubmit","reset","errors","formState","message","style","display","alignItems","label","size","defaultValue","sx","btnStyle","variant","type","color","border","marginLeft","API_KEY","BASE_URL","fetchMovie","movieId","axios","errorHandler","fetchTrendingMovies","fetchReviews","fetchActors","TargetComponent","current","idle","this","Component"],"sourceRoot":""}